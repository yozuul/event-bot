import { Injectable } from '@nestjs/common';
import { Ctx, InjectBot } from 'nestjs-telegraf';

import { Context } from '../context.interface';
import { AdwerstingService } from '@app/adwersting/adwersting.service';
import { UsersService } from '@app/users/users.service';

@Injectable()
export class AdwerstingActions {
   constructor(
      @InjectBot()
      private bot,
      private readonly adwerstingService: AdwerstingService,
      private readonly userService: UsersService
   ) {}

   async addAdwControlButton(@Ctx() ctx: Context, postId) {
      await ctx.telegram.sendMessage(
         process.env.ADW_CHANNEL, `‚¨ÜÔ∏è –ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: ID: ${postId}`,
         this.controlButtons(postId)
      );
   }

   async forwardMessageToUsers(@Ctx() ctx: Context) {
      // const userIds = [1884297416, 6066527002]
      const chatId = parseInt(process.env.ADW_CHANNEL)
      const adwPostId = this.adwPostId(ctx)
      const users = await this.userService.findAll()
      await ctx.answerCbQuery(`–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞, –≤—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: ${users.length}`)

      for (const user of users) {
         try {
            const msg = await ctx.telegram.forwardMessage(user.tgId, chatId, adwPostId);
            await this.adwerstingService.addSenderChatId(adwPostId, msg.message_id, user.tgId)
         } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.tgId}:`, error);
         }
      }

      const buttonMessageId = ctx.callbackQuery.message.message_id
      const senders = await this.adwerstingService.findSenderChatIdByPostId(adwPostId)
      const newText = `‚¨ÜÔ∏è –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä–µ—à–µ–Ω–∞. –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${senders.length}`
      await this.editControlButtons(ctx, chatId, adwPostId, buttonMessageId, newText)
   }

   async editControlButtons(@Ctx() ctx: Context, chatId, adwPostId, buttonMessageId, newText) {
      try {
         await ctx.telegram.editMessageText(
            chatId, buttonMessageId,  undefined, newText,
            this.controlButtons(adwPostId)
         );
      } catch (error) {
         const errText = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
         console.log(error)
         await ctx.answerCbQuery(errText)
      }
   }

   async deleteAdwPost(@Ctx() ctx: Context) {
      const adwPostId = this.adwPostId(ctx)
      const msgs = await this.adwerstingService.findSenderChatIdByPostId(adwPostId)
      for (let msg of msgs) {
         try {
            await ctx.telegram.deleteMessage(msg.userId, msg.senderPostId)
         } catch (error) {
            console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è')
         }
         try {
            await this.adwerstingService.cleaner(msg.senderPostId)
         } catch (error) {
            console.log('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏')
         }
      }
      await ctx.answerCbQuery('–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      const buttonMessageId = ctx.callbackQuery.message.message_id
      const newText = `‚¨ÜÔ∏è –ß–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã`
      const chatId = parseInt(process.env.ADW_CHANNEL)
      await this.editControlButtons(ctx, chatId, adwPostId, buttonMessageId, newText)
   }

   adwPostId(ctx) {
      return ctx.callbackQuery['data'].split('_')[1]
   }

   controlButtons(postId) {
      return {
         reply_markup: {
            inline_keyboard: [
               [{
                  text: '‚úâÔ∏è –†–∞–∑–æ—Å–ª–∞—Ç—å',
                  callback_data: `sendAdwPost_${postId}`,
               },
               {
                  text: 'üóë –£–¥–∞–ª–∏—Ç—å',
                  callback_data: `deleteAdwPost_${postId}`,
               }],
            ],
         },
      }
   }

}