import { Injectable } from '@nestjs/common';
import {session} from 'telegraf';
import { InlineKeyboardButton } from 'telegraf/types';

const t = (lng, uz, ru) => (lng === 'uz' ? uz : ru);

const approveEventButton = (lang, eventId?) => [
   { text: t(lang, 'üëç –¢–∞—Å–¥–∏“õ–ª–∞—à', 'üëç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'), callback_data: `approve_event_${eventId}` },
   { text: t(lang, 'üëé –†–∞–¥ —ç—Ç–º–æ“õ', 'üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å'), callback_data: `decline_event_${eventId}` },
]
const editEventButton = (lang, eventId?) => {
   const defaultKeyboard = [
      {
         text: t(lang, 'üìÖ Tahrir qilish', 'üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '),
         callback_data: 'edit_event'
      }
   ]
   const urlKeyboard = [
      {
         text: t(lang, 'üìÖ Tahrir qilish', 'üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '),
         url: `https://t.me/${process.env.BOT_USERNAME}?start=${eventId}`
      }
   ]

   const goToGroupKeyboard = [
      {
         text: t(lang, 'üìÖ Tahrir qilish', 'üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '),
         url: `https://t.me/${process.env.PUBLIC_GROUP_USERNAME}`
      }
   ]
   if(!eventId) {
      return defaultKeyboard
   }
   if(eventId) {
      return urlKeyboard
   }
}

const deleteEventButton = (lang, eventId?) => [
   {
      text: t(lang, `üóë O‚Äòchirish`, 'üóë –£–¥–∞–ª–∏—Ç—å'),
      callback_data: eventId ? `delete_event_${eventId}` : 'delete_event'
   }
];

const publicToGroupText = (session, eventId) => {
   if(session.user) {
      return '‚úÖ –í –≥—Ä—É–ø–ø—É'
   }
   return session.checkboxes[eventId]?.public_to_group ? '‚úÖ –í –≥—Ä—É–ø–ø—É' : '‚¨úÔ∏è –í –≥—Ä—É–ø–ø—É';
}
const publicToBotText = (session, eventId) => {
   if(session.user) {
      return '‚úÖ –í–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞'
   }
   return session.checkboxes[eventId]?.public_to_bot
   ? '‚úÖ –í–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞'
   : '‚¨úÔ∏è –í–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞';
}

@Injectable()
export class EventsKeyboard {
   get title() {
      return {
         users : {
            uz: 'Sizning tadbirlaringiz', ru: '–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
         },
         usersNoData : {
            uz: `Siz hali biror tadbir qo'shmagansiz`, ru: '–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
         },
         all: {
            uz: 'Shaharingizdagi tadbirlar', ru: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞'
         },
         allNoData: {
            uz: `Tadbirlar topilmadi. Birinchi bo‚Äòlishingiz mumkin`, ru: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º'
         }
      }
   }

   addEditEvent(lang, canSave?, canEdit?, canDelete?, isAdmin?, isApproved?, session?) {

      let keyboard = [
         [
            { text: t(lang, 'Nom', '–ù–∞–∑–≤–∞–Ω–∏–µ'), callback_data: 'edit_event_name' },
            { text: t(lang, 'Foto', '–§–æ—Ç–æ'), callback_data: 'edit_event_photo' },
         ],
         [
            { text: t(lang, 'Tavsif', '–û–ø–∏—Å–∞–Ω–∏–µ'), callback_data: 'edit_event_description' },
            { text: t(lang, 'Narx', '–°—Ç–æ–∏–º–æ—Å—Ç—å'), callback_data: 'edit_event_cost' },
         ],
         [
            { text: t(lang, 'Sana', '–î–∞—Ç–∞'), callback_data: 'edit_event_date' },
            { text: t(lang, 'Sana oralig‚Äòi', '–î–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç'), callback_data: 'edit_event_date_raw' },
         ],
         [
            { text: t(lang, 'Kategoriya', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'), callback_data: 'edit_event_category' },
            { text: t(lang, 'Telefon', '–¢–µ–ª–µ—Ñ–æ–Ω'), callback_data: 'edit_event_phone' },
         ],
         [
            { text: t(lang, "Aloqani o'zgartirish", '–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç'), callback_data: 'edit_organisation_contact' },
         ],
         // [
         //    {
         //       text: t(lang, '–¢–µ—Å—Ç', '–¢–µ—Å—Ç'), callback_data: 'test',
         //    }
         // ]
      ];

      const goBackButton = [{ text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' }]
      const saveEventButton = [
         { text: t(lang, 'üëÅ‚Äçüó® Tekshirishga yuborish', 'üëÅ‚Äçüó® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'), callback_data: 'save_event' }
      ]
      const updateEventButton = [
         { text: t(lang, 'üìÖ Saqlash', 'üìÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'), callback_data: 'update_event' }
      ]
      if(canSave) {
         if(!canEdit) {
            keyboard.push(saveEventButton)
         }
         if(canEdit) {
            keyboard.push(updateEventButton)
         }
         if(canDelete) {
            keyboard.push(deleteEventButton(lang, isApproved))
         }
         keyboard.push(goBackButton)
      } else {
         keyboard.push(goBackButton)
      }
      if(isApproved) {
         keyboard = []
         keyboard.push([
               { text: publicToGroupText(session, isApproved), callback_data: `publicToGroup_${isApproved}` },
               { text: publicToBotText(session, isApproved), callback_data: `publicToBot_${isApproved}` },
            ],
            approveEventButton(lang, isApproved),
            // editEventButton(lang, isApproved) as any,
            deleteEventButton(lang, isApproved),
         )
      }
      return keyboard
   };

   viewer(lang, prev?, next?, count?, canEdit?, session?, isApproved?, currentEvent?) {
      const keyboard = [];
      const noPrev = [
         { text: '', callback_data: 'empty' },
         { text: count, callback_data: 'empty' },
         { text: '‚û°Ô∏è', callback_data: 'forward' },
      ]
      const noNext = [
         { text: '‚¨ÖÔ∏è', callback_data: 'backward' },
         { text: count, callback_data: 'empty' },
         { text: '', callback_data: 'empty' },
      ]
      const noNextPrev = [
         { text: '', callback_data: 'empty' },
         { text: count, callback_data: 'empty' },
         { text: '', callback_data: 'empty' },
      ]
      const fullNavi = [
         { text: '‚¨ÖÔ∏è', callback_data: 'backward' },
         { text: count, callback_data: 'empty' },
         { text: '‚û°Ô∏è', callback_data: 'forward' },
      ]
      const goBackButton = [{ text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' }]
      const discussLink = `${process.env.PUBLIC_CHANNEL_URL}/${currentEvent.groupPostId}/?comment=1`
      console.log(discussLink)
      const comment = [
         {
            text: t(lang, 'üí¨ Komment qilish', 'üí¨ –ö–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å '),
            url: discussLink
         }
      ]

      if(!prev && next) {
         keyboard.push(noPrev)
      }
      if(prev && !next) {
         keyboard.push(noNext)
      }
      if(!prev && !next) {
         keyboard.push(noNextPrev)
      }
      if(prev && next) {
         keyboard.push(fullNavi)
      }
      keyboard.push(comment)
      if(canEdit) {
         keyboard.push(editEventButton(lang))
         keyboard.push(deleteEventButton(lang))
         // keyboard.push(fullDesription)
         keyboard.push(goBackButton)
      }
      if(!canEdit) {
         // keyboard.push(fullDesription)
         keyboard.push(goBackButton)
      }
      // console.log('keyboard', currentEvent)
      if(isApproved) {
         if(session.query !== 'showModerateEvents') {
            keyboard.push([
               { text: publicToGroupText(session, isApproved), callback_data: `publicToGroup_${currentEvent.id}` },
               { text: publicToBotText(session, isApproved), callback_data: `publicToBot_${currentEvent.id}` },
            ])
         }
         keyboard.push(
            approveEventButton(lang, currentEvent.id),
            deleteEventButton(lang, currentEvent.id),
         )
      }
      if(currentEvent.published) {
         keyboard.push([
            { text: `üëç ${currentEvent.likes}`, callback_data: `like_${currentEvent.id}` },
            { text: `üëé ${currentEvent.dislikes}`, callback_data: `dislike_${currentEvent.id}` },
         ])
      }
      return keyboard
   };

   noUsersEvents (lang) {
      const keyboard = [
         [
            { text: t(lang, `üìÖ Tadbir qo'shish`, 'üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), callback_data: 'add_event' },
         ],
         [
            { text: t(lang, `Hammasini ko'rsatish`, '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ'), callback_data: 'all_events' },
         ],
         [
            { text: t(lang, '‚¨ÖÔ∏è Orqaga', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' },
         ],
      ];
      return keyboard
   };

   noEvents (lang, showCalendar?) {
      const keyboard = [
         [
            { text: t(lang, 'üìÖ –¢–∞–¥–±–∏—Ä “õ—û—à–∏—à', 'üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), callback_data: 'add_event' },
         ],
         [
            { text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' },
         ],
      ];
      if(showCalendar) {
         keyboard.push(
            [{ text: t(lang, '–ë–æ—à“õ–∞ —Å–∞–Ω–∞–Ω–∏ —Ç–∞–Ω–ª–∞—à', '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É'), callback_data: 'show_calendar' }]
         )
      }
      return keyboard
   };
}