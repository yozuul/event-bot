import { Injectable } from '@nestjs/common';
import { InlineKeyboardButton } from 'telegraf/types';

const t = (lng, uz, ru) => (lng === 'uz' ? uz : ru);

const approveEventButton = (lang, eventId?) => [
   { text: t(lang, 'üëç –¢–∞—Å–¥–∏“õ–ª–∞—à', 'üëç –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'), callback_data: `approve_event_${eventId}` },
   { text: t(lang, 'üëé –†–∞–¥ —ç—Ç–º–æ“õ', 'üëé –û—Ç–∫–ª–æ–Ω–∏—Ç—å'), callback_data: `decline_event_${eventId}` },
]
const editEventButton = (lang, eventId?) => {
   const defaultKeyboard = [
      {
         text: t(lang, 'üìÖ –¢–∞“≥—Ä–∏—Ä–ª–∞—à', 'üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '),
         callback_data: 'edit_event'
      }
   ]
   const urlKeyboard = [
      {
         text: t(lang, 'üìÖ –¢–∞“≥—Ä–∏—Ä–ª–∞—à', 'üìÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å '),
         url: `https://t.me/${process.env.BOT_USERNAME}?start=${eventId}`
      }
   ]
   if(!eventId) {
      return defaultKeyboard
   }
   if(eventId) {
      return urlKeyboard
   }
}

const deleteEventButton = (lang, eventId?) => [
   {
      text: t(lang, 'üóë –é—á–∏—Ä–∏—à', 'üóë –£–¥–∞–ª–∏—Ç—å'),
      callback_data: eventId ? `delete_event_${eventId}` : 'delete_event'
   }
];

@Injectable()
export class EventsKeyboard {
   get title() {
      return {
         users : {
            uz: '–°–∏–∑–Ω–∏–Ω–≥ —Ç–∞–¥–±–∏—Ä–ª–∞—Ä–∏–Ω–≥–∏–∑', ru: '–í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
         },
         usersNoData : {
            uz: '–°–∏–∑ “≥–∞–ª–∏ –±–∏—Ä–æ—Ä —Ç–∞–¥–±–∏—Ä “õ—û—à–ºadingiz', ru: '–í—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
         },
         all: {
            uz: '–®–∞“≥–∞—Ä–∏–Ω–≥–∏–∑–¥–∞–≥–∏ —Ç–∞–¥–±–∏—Ä–ª–∞—Ä', ru: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞'
         },
         allNoData: {
            uz: '–¢–∞–¥–±–∏—Ä–ª–∞—Ä —Ç–æ–ø–∏–ª–º–∞–¥–∏. –ë–∏—Ä–∏–Ω—á–∏ –±—û–ª–∏—à–∏–Ω–≥–∏–∑ –º—É–º–∫–∏–Ω', ru: '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º'
         }
      }
   }

   addEditEvent(lang, canSave?, canEdit?, canDelete?, isAdmin?, isApproved?, session?) {
      const publicToGroupText = session.checkboxes?.public_to_group
      ? '‚úÖ –í –≥—Ä—É–ø–ø—É'
      : '‚¨úÔ∏è –í –≥—Ä—É–ø–ø—É';
      const publicToBotText = session.checkboxes?.public_to_bot
         ? '‚úÖ –í–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞'
         : '‚¨úÔ∏è –í–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞';

      let keyboard = [
         [
            { text: t(lang, '–ù–æ–º–∏', '–ù–∞–∑–≤–∞–Ω–∏–µ'), callback_data: 'edit_event_name' },
            { text: t(lang, '–†–∞—Å–º', '–§–æ—Ç–æ'), callback_data: 'edit_event_photo' },
         ],
         [
            { text: t(lang, '–¢–∞–≤—Å–∏—Ñ', '–û–ø–∏—Å–∞–Ω–∏–µ'), callback_data: 'edit_event_description' },
            { text: t(lang, '–°–∞–Ω–∞', '–î–∞—Ç–∞'), callback_data: 'edit_event_date' },
         ],
         [
            { text: t(lang, '–ù–∞—Ä—Ö–∏', '–°—Ç–æ–∏–º–æ—Å—Ç—å'), callback_data: 'edit_event_cost' },
            { text: t(lang, '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'), callback_data: 'edit_event_category' },
         ],
         [
            { text: t(lang, '–ê–ª–æ“õ–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∏', '–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω'), callback_data: 'edit_event_phone' },
         ],
         // [
         //    {
         //       text: t(lang, '–¢–µ—Å—Ç', '–¢–µ—Å—Ç'), callback_data: 'test',
         //    }
         // ]
      ];

      const goBackButton = [{ text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' }]
      const saveEventButton = [
         { text: t(lang, 'üëÅ‚Äçüó® –¢–µ–∫—à–∏—Ä—É–≤–≥–∞ —é–±–æ—Ä–∏—à', 'üëÅ‚Äçüó® –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É'), callback_data: 'save_event' }
      ]
      const updateEventButton = [{ text: t(lang, 'üìÖ –°–∞“õ–ª–∞—à', 'üìÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å'), callback_data: 'update_event' }]
      if(canSave) {
         if(!canEdit) {
            keyboard.push(saveEventButton)
         }
         if(canEdit) {
            keyboard.push(updateEventButton)
         }
         if(canDelete) {
            keyboard.push(deleteEventButton(lang, isApproved))
         }
         keyboard.push(goBackButton)
      } else {
         keyboard.push(goBackButton)
      }
      if(isApproved) {
         keyboard = []
         keyboard.push([
               { text: publicToGroupText, callback_data: `publicToGroup_${isApproved}` },
               { text: publicToBotText, callback_data: `publicToBot_${isApproved}` },
            ],
            approveEventButton(lang, isApproved),
            // editEventButton(lang, isApproved) as any,
            deleteEventButton(lang, isApproved),
         )
      }
      return keyboard
   };

   viewer(lang, prev?, next?, count?, canEdit?, canApprove?) {
      const keyboard = [];
      const noPrev = [
         { text: '', callback_data: 'empty' },
         { text: count, callback_data: 'empty' },
         { text: '‚û°Ô∏è', callback_data: 'forward' },
      ]
      const noNext = [
         { text: '‚¨ÖÔ∏è', callback_data: 'backward' },
         { text: count, callback_data: 'empty' },
         { text: '', callback_data: 'empty' },
      ]
      const noNextPrev = [
         { text: '', callback_data: 'empty' },
         { text: count, callback_data: 'empty' },
         { text: '', callback_data: 'empty' },
      ]
      const fullNavi = [
         { text: '‚¨ÖÔ∏è', callback_data: 'backward' },
         { text: count, callback_data: 'empty' },
         { text: '‚û°Ô∏è', callback_data: 'forward' },
      ]
      const goBackButton = [{ text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' }]
      const fullDesription = [{ text: t(lang, '–¢—û–ª–∏“õ —Ç–∞–≤—Å–∏—Ñ', '–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ'), callback_data: 'full_event' }]

      if(!prev && next) {
         keyboard.push(noPrev)
      }
      if(prev && !next) {
         keyboard.push(noNext)
      }
      if(!prev && !next) {
         keyboard.push(noNextPrev)
      }
      if(prev && next) {
         keyboard.push(fullNavi)
      }
      if(canEdit) {
         keyboard.push(editEventButton(lang))
         keyboard.push(deleteEventButton(lang))
         // keyboard.push(fullDesription)
         keyboard.push(goBackButton)
      }
      if(!canEdit) {
         // keyboard.push(fullDesription)
         keyboard.push(goBackButton)
      }
      return keyboard
   };

   noUsersEvents (lang) {
      const keyboard = [
         [
            { text: t(lang, 'üìÖ –¢–∞–¥–±–∏—Ä “õ—û—à–∏—à', 'üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), callback_data: 'add_event' },
         ],
         [
            { text: t(lang, '“≤–∞–º–º–∞—Å–∏–Ω–∏ –∫—û—Ä—Å–∞—Ç–∏—à', '–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ'), callback_data: 'all_events' },
         ],
         [
            { text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' },
         ],
      ];
      return keyboard
   };

   noEvents (lang) {
      const keyboard = [
         [
            { text: t(lang, 'üìÖ –¢–∞–¥–±–∏—Ä “õ—û—à–∏—à', 'üìÖ –î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'), callback_data: 'add_event' },
         ],
         [
            { text: t(lang, '‚¨ÖÔ∏è –û—Ä“õ–∞', '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'), callback_data: 'go_back' },
         ],
      ];
      return keyboard
   };
}