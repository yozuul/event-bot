import { Injectable } from '@nestjs/common';
import { Scene, SceneEnter, Ctx, Action, On, Command, Message, Start } from 'nestjs-telegraf';
import { Context } from '../context.interface';

import { profileKeyboard } from '../keyboards';
import { UsersService } from '@app/users/users.service';
import { BotService } from '../bot.service';
import { EventsService } from '@app/events/events.service';

@Scene('PROFILE_SCENE')
@Injectable()
export class ProfileScene {
   private profileText: string = '';
   constructor(
      private readonly userService: UsersService,
      private readonly botService: BotService,
   ) {}

   @SceneEnter()
   async onSceneEnter(@Ctx() ctx: Context) {
      await this.botService.sceneEnterCleaner(ctx)
      ctx.session.user = await this.userService.findByTgId(ctx.from.id);
      const profileMessage = await this.showProfile(ctx);
      ctx.session.messageIdToEdit = profileMessage.message_id;
   }

   private async showProfile(ctx: Context) {
      const lng = ctx.session.language || 'ru';
      await this.genProfileText(ctx);
      return ctx.replyWithPhoto(
         ctx.session.user.avatar || 'https://via.placeholder.com/300',
         {
            caption: this.profileText,
            reply_markup: {
               inline_keyboard: profileKeyboard(lng),
            },
         },
      );
   }

   async genProfileText(ctx: Context) {
      const lng = ctx.session.language || 'ru';
      const t = (uz: string, ru: string) => (lng === 'uz' ? uz : ru);
      const noData = t(`Ko'rsatilmagan`, '–ù–µ —É–∫–∞–∑–∞–Ω–æ');
      const fields = [
         { label: t('Ism', '–ò–º—è'), value: ctx.session.user.name },
         { label: t('Yosh', '–í–æ–∑—Ä–∞—Å—Ç'), value: ctx.session.user.age },
         { label: t('Telefon', '–¢–µ–ª–µ—Ñ–æ–Ω'), value: ctx.session.user.phone },
      ];
      this.profileText = fields
         .map(field => `${field.label}: ${field.value || noData}`)
         .join('\n');
   }

   async updateProfileInfo(ctx: Context) {
      this.genProfileText(ctx)
      try {
         await ctx.telegram.editMessageMedia(
            ctx.chat.id, ctx.session.messageIdToEdit, undefined,
            {
               type: 'photo',
               media: ctx.session.user.avatar || 'https://via.placeholder.com/300',
               caption: this.profileText,

            },
            {
               reply_markup: {
                  inline_keyboard: profileKeyboard(ctx.session.language),
               },
            }
         );
      } catch (error) {
         console.log(error)
         console.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞–∑–¥–µ–ª /profile')
      }
   }

   @Action('edit_name')
   async editName(@Ctx() ctx: Context) {
      ctx.session.messageIdToEdit = ctx.callbackQuery.message.message_id;
      const lang = ctx.session.language
      const msg = await ctx.reply(lang == 'uz' ? 'Yangi ismingizni kiriting:' : '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:');
      ctx.session.awaitingInput = 'name';
      ctx.session.messageToDelete.push(msg.message_id);
   }

   @Action('edit_photo')
   async editPhoto(@Ctx() ctx: Context) {
      ctx.session.messageIdToEdit = ctx.callbackQuery.message.message_id;
      const lang = ctx.session.language
      const msg = await ctx.reply(lang == 'uz' ? 'Yangi fotosuratni yuboring:' : '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:');
      ctx.session.awaitingInput = 'photo';
      ctx.session.messageToDelete.push(msg.message_id);
   }

   @Action('edit_age')
   async editAge(@Ctx() ctx: Context) {
      ctx.session.messageIdToEdit = ctx.callbackQuery.message.message_id;
      const lang = ctx.session.language
      const msg = await ctx.reply(lang == 'uz' ? 'Yangi yoshni kiriting:' : '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:');
      ctx.session.awaitingInput = 'age';
      ctx.session.messageToDelete.push(msg.message_id);
   }

   @Action('edit_phone')
   async editPhone(@Ctx() ctx: Context) {
      ctx.session.messageIdToEdit = ctx.callbackQuery.message.message_id;
      const lang = ctx.session.language
      const msgText = lang == 'uz' ? 'Iltimos, telefon raqamingizni yuboring.' : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.'
      const btnText = lang == 'uz' ? 'üìû Telefon raqamini yuboring' : 'üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
      const msg = await ctx.reply(msgText, {
         reply_markup: {
            keyboard: [
               [{ text: btnText, request_contact: true }]
            ],
            one_time_keyboard: true,
            resize_keyboard: true,
         },
      });
      ctx.session.awaitingInput = 'phone';
      ctx.session.messageToDelete.push(msg.message_id);
   }

   @On('text')
   async handleTextInput(@Ctx() ctx: Context, @Message() message) {
      console.log('message.text', message.text)
      await this.botService.checkGlobalCommand(ctx, message.text, 'PROFILE_SCENE')
      ctx.session.messageToDelete.push(message.message_id);
      const lang = ctx.session.language
      if (ctx.session.awaitingInput === 'name') {
         ctx.session.user.name = message.text;
         await this.refreshData(ctx)
      } else if (ctx.session.awaitingInput === 'age') {
         ctx.session.user.age = Number(message.text);
         if(!ctx.session.user.age) {
            const msg = await ctx.reply(lang === 'uz' ? 'Faqat raqamlar' : '–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã');
            ctx.session.messageToDelete.push(msg.message_id);
            return
         }
         await this.refreshData(ctx)
      } else if (ctx.session.awaitingInput === 'photo') {
         const msgText = lang === 'uz' ? 'Rasmni yuklang' : '–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ'
         const msg = await ctx.reply(msgText);
         ctx.session.messageToDelete.push(msg.message_id);
      }
   }

   @On('photo')
   async handlePhotoInput(@Ctx() ctx: Context, @Message() message) {
      ctx.session.messageToDelete.push(message.message_id);
      if (ctx.session.awaitingInput === 'photo') {
         if (message.photo && message.photo.length > 0) {
            const photoId = message.photo[message.photo.length - 1].file_id;
            ctx.session.user.avatar = photoId
         } else {
            await ctx.reply('–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
         }
         await this.refreshData(ctx)
      }
   }

   @On('contact')
   async cintactMessage(@Ctx() ctx: Context, @Message() message) {
      ctx.session.messageToDelete.push(message.message_id);
      ctx.session.user.phone = message.contact.phone_number
      await this.refreshData(ctx)
   }

   @Action('set_lang_uz')
   async setUzbekLanguage(@Ctx() ctx: Context) {
      console.log('BEFORE', ctx.session.messageIdToEdit)
      ctx.session.messageIdToEdit = ctx.callbackQuery?.message?.message_id;
      ctx.session.language = 'uz';
      ctx.session.user.language =  ctx.session.language
      await ctx.answerCbQuery(`O'zbek tili tanlandi`);
      await this.updateProfileInfo(ctx)
      await this.userService.update(ctx.from.id, ctx.session.user)
      console.log('AFTER', ctx.session.messageIdToEdit)
   }

   @Action('set_lang_ru')
   async setRussianLanguage(@Ctx() ctx: Context) {
      console.log('BEFORE', ctx.session.messageIdToEdit)
      ctx.session.messageIdToEdit = ctx.callbackQuery?.message?.message_id;
      ctx.session.language = 'ru';
      ctx.session.user.language =  ctx.session.language
      await ctx.answerCbQuery('–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫');
      await this.updateProfileInfo(ctx)
      await this.userService.update(ctx.from.id, ctx.session.user)
      console.log('AFTER', ctx.session.messageIdToEdit)
   }

   @Action('my_events')
   async myEvents(@Ctx() ctx: Context) {
      console.log('show_all_users_events')
      ctx.session.prevScene = 'PROFILE_SCENE'
      ctx.session.query = 'showAllUsersEvents'
      await ctx.scene.enter('EVENTS_LIST_SCENE')
   }

   @Action('add_event')
   async addEvent(@Ctx() ctx: Context) {
      const userId = ctx.from.id;
      const lang = ctx.session.language
      try {
         const member = await ctx.telegram.getChatMember(process.env.ORGANISATION_GROUP, userId);
         // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         if (['member', 'administrator', 'creator'].includes(member.status)) {
            ctx.session.query = 'addNewEvent'
            ctx.session.prevScene = 'PROFILE_SCENE'
            await ctx.answerCbQuery('–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
            await ctx.scene.enter('EVENT_CREATE_SCENE')
         } else {
            const text = lang === 'uz' ? `Adminstratsiya bilan bog'laning, kirish huquqini olish uchun:` : '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞:'
            const msg = await ctx.reply(text + ` ${process.env.FEEDBACK_CHANNEL_URL}`);
            ctx.session.messageToDelete.push(msg.message_id)
            await ctx.answerCbQuery(lang === 'uz' ? `Hozirda siz tadbirlar qo'shishingiz mumkin emas` : '–í—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è');
         }
      } catch (error) {
         console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
         await ctx.reply('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≥—Ä—É–ø–ø—ã/–∫–∞–Ω–∞–ª–∞.');
      }

   }

   async refreshData(ctx) {
      await this.updateProfileInfo(ctx)
      await this.botService.clearChat(ctx)
      await this.userService.update(ctx.from.id, ctx.session.user)
      ctx.session.awaitingInput = null;
   }

   @On('callback_query')
   async checkCallback(@Ctx() ctx: Context) {
      await this.botService.checkGlobalActions(ctx, 'EVENT_CREATE_SCENE')
   }
}